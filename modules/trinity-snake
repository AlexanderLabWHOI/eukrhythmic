configfile: "config.yaml"

import io
import os
import pandas as pd
from snakemake.exceptions import print_exception, WorkflowError
import sys
sys.path.insert(1, '../scripts')
from importworkspace import *

def get_samples(assemblygroup):
    samplelist = list(SAMPLEINFO.loc[SAMPLEINFO['AssemblyGroup'] == assemblygroup]['SampleID']) 
    
    return samplelist
    
def get_samples_commas(assemblygroup, dropspike, leftorright, commas = False):
    samplelist = list(SAMPLEINFO.loc[SAMPLEINFO['AssemblyGroup'] == assemblygroup]['SampleID']) 
    foldername = "bbmap"
    extensionname = "clean"
    if dropspike == 0:
        foldername = "firsttrim"
        extensionname = "trimmed"
    if leftorright == "left":
        samplelist = [os.path.join(OUTPUTDIR, foldername, sample + "_1." + extensionname + ".fastq.gz") 
                      for sample in samplelist]
    else:
        samplelist = [os.path.join(OUTPUTDIR, foldername, sample + "_2." + extensionname + ".fastq.gz") 
                      for sample in samplelist]
    if commas:
        return ",".join(samplelist)
    else:
        return samplelist
    
def get_samples_(assemblygroup, dropspike, leftorright):
    samplelist = list(SAMPLEINFO.loc[SAMPLEINFO['AssemblyGroup'] == assemblygroup]['SampleID']) 
    foldername = "bbmap"
    extensionname = "clean"
    if dropspike == 0:
        foldername = "firsttrim"
        extensionname = "trimmed"
    if leftorright == "left":
        samplelist = [os.path.join(OUTPUTDIR, foldername, sample + "_1." + extensionname + ".fastq.gz") 
                      for sample in samplelist]
    else:
        samplelist = [os.path.join(OUTPUTDIR, foldername, sample + "_2." + extensionname + ".fastq.gz") 
                      for sample in samplelist]
    return samplelist
    
def getfoldername(dropspike):
    if dropspike == 0:
        return "firsttrim"
    return "bbmap"

def getextname(dropspike):
    if dropspike == 0:
        return "trimmed"
    return "clean"

   
print("CPUs in")
print(MAXCPUSPERTASK * MAXTASKS)
#print(MAXTHREADS * MAXCORES)
 
if DROPSPIKE == 0:
    LEFTFILE = lambda filename: expand(os.path.join(OUTPUTDIR, "firsttrim", "{samples}_1.trimmed.fastq.gz"), samples = get_samples(filename.assembly))
    RIGHTFILE = lambda filename: expand(os.path.join(OUTPUTDIR, "firsttrim", "{samples}_2.trimmed.fastq.gz"), samples = get_samples(filename.assembly))
else:
    LEFTFILE = lambda filename: expand(os.path.join(OUTPUTDIR, "bbmap", "{samples}_1.clean.fastq.gz"), samples = get_samples(filename.assembly))
    RIGHTFILE = lambda filename: expand(os.path.join(OUTPUTDIR, "bbmap", "{samples}_2.clean.fastq.gz"), samples = get_samples(filename.assembly))
    
# This module needs to grab all of the list of the individual files associated with the specified
# assembly group, after the scripts/make-assembly-file.py script builds said assembly groups 
# according to user specifications.  
rule trinity:
    input:
        left = lambda filename: get_samples_(filename.assembly, DROPSPIKE, "left"),
        right = lambda filename: get_samples_(filename.assembly, DROPSPIKE, "right")
        
        #",".join([lambda filename: expand(os.path.join(OUTPUTDIR, {foldername}, 
        ##        "{samples}_1.{extensionname}.fastq.gz"), 
        #        samples = get_samples(filename.assembly), foldername = getfoldername(DROPSPIKE), 
        #        extensionname = getextname(DROPSPIKE))]),
        #right = [lambda filename: expand(os.path.join(OUTPUTDIR, "bbmap", 
        #        "{samples}_2.clean.fastq.gz"), samples = get_samples(filename.assembly), 
        #        foldername = getfoldername(DROPSPIKE), extensionname = getextname(DROPSPIKE))]
    output:
        os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}", "Trinity.fasta")
    params:
        extra = "",
        outdir = os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}"),
        left = lambda filename: get_samples_commas(filename.assembly, DROPSPIKE, "left"), #LEFTFILE,
        right = lambda filename: get_samples_commas(filename.assembly, DROPSPIKE, "right"), #RIGHTFILE,
        maxmem = MAXMEMORY,
        CPUs = MAXCPUSPERTASK * MAXTASKS #MAXTHREADS * MAXCORES
    log:
        err = os.path.join("logs","trinity","outputlog_{assembly}_err.log"),
        out = os.path.join("logs","trinity","outputlog_{assembly}_out.log")
    conda: '../envs/trinity-env.yaml'
    shell:
        '''
        Trinity --seqType fq --max_memory {params.maxmem}G --CPU {params.CPUs} --left {input.left} --right {input.right} --output {params.outdir} 2> {log.err} 1> {log.out}
        '''
        
rule trinity_SE:
    input:
        single = LEFTFILE
    output:
        os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}", "Trinity.fasta")
    params:
        extra = "",
        outdir = os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}"),
        left = LEFTFILE,
        right = RIGHTFILE,
        maxmem = MAXMEMORY,
        CPUs = MAXCPUSPERTASK * MAXTASKS #MAXTHREADS * MAXCORES
    log:
        err = os.path.join("logs","trinity","outputlog_{assembly}_err.log"),
        out = os.path.join("logs","trinity","outputlog_{assembly}_out.log")
    conda: '../envs/trinity-env.yaml'
    shell:
        '''
        Trinity --seqType fq --max_memory {params.maxmem}G --CPU {params.CPUs} --bflyCalculateCPU --single {input.single} --output {params.outdir} 2> {log.err} 1> {log.out}
        '''
   
rule trinity_cleanup:
    input:
        trinityfile = os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}", "Trinity.fasta")
    output:
        assembled = os.path.join(ASSEMBLEDDIR, "{assembly}_trinity.fasta"),
        jellyfish = os.path.join(OUTPUTDIR, "jellyfish", "{assembly}_jellyfish_25.fasta"),
        scratchout = directory(os.path.join(SCRATCHDIR, "trinity_results_assembly_{assembly}")) 
    params:
        extra = "",
        outdir = os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}"),
        left = LEFTFILE,
        right = RIGHTFILE,
        scratch = os.path.join(SCRATCHDIR),
        jellyfile = os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}", "jellyfish.kmers.25.asm.fa")
    shell:
        '''
        mkdir -p {params.scratch}
        cp {input.trinityfile} {output.assembled}
        mv {params.jellyfile} {output.jellyfish}
        if [ {params.outdir} != {params.scratch} ]
        then
            mv {params.outdir} {params.scratch}
        fi
        '''

