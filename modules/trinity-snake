configfile: "config.yaml"

import io
import os
import pandas as pd
from snakemake.exceptions import print_exception, WorkflowError

OUTPUTDIR = config['outputDIR']
ASSEMBLYFILE = pd.read_csv(config["metaT_sample"], sep = "\t")
ASSEMBLYDICT = dict(zip(list(ASSEMBLYFILE.AssemblyGroup), list(ASSEMBLYFILE.SampleName)))
if 'assembledDIR' in config:
    ASSEMBLEDDIR = os.path.join(OUTPUTDIR, config['assembledDIR'])
else:
    ASSEMBLEDDIR = os.path.join(OUTPUTDIR, "assembled")
DROPSPIKE = config['dropspike']
SCRATCHDIR = config['scratch']

def get_samples(assemblygroup):
    samplelist = list(ASSEMBLYFILE.loc[ASSEMBLYFILE['AssemblyGroup'] == assemblygroup]['SampleID'])
    return samplelist
    
if DROPSPIKE == 0:
    LEFTFILE = lambda filename: expand(os.path.join(OUTPUTDIR, "firsttrim", "{samples}_1.trimmed.fastq.gz"), samples = get_samples(filename.assembly))
    RIGHTFILE = lambda filename: expand(os.path.join(OUTPUTDIR, "firsttrim", "{samples}_2.trimmed.fastq.gz"), samples = get_samples(filename.assembly))
else:
    LEFTFILE = lambda filename: expand(os.path.join(OUTPUTDIR, "bbmap", "{samples}_1.clean.fastq.gz"), samples = get_samples(filename.assembly))
    RIGHTFILE = lambda filename: expand(os.path.join(OUTPUTDIR, "bbmap", "{samples}_2.clean.fastq.gz"), samples = get_samples(filename.assembly))
    
# This module needs to grab all of the list of the 
# individual files associated with the specified
# assembly group, after the scripts/make-assembly-file.py
# script builds said assembly groups according to user
# specifications.  
rule trinity:
    input:
        left = LEFTFILE,
        right = RIGHTFILE
    output:
        os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}", "Trinity.fasta")
    log:
        "logs/trinity/outputlog_{assembly}_trinity.log"
    params:
        extra = "",
        outdir = os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}"),
        left = LEFTFILE,
        right = RIGHTFILE
    threads: 4
    conda: '../envs/trinity-env.yaml'
    shell:
        '''
        Trinity --seqType fq --max_memory 50G --left {input.left} --right {input.right} --output {params.outdir}
        '''
        
rule trinity_SE:
    input:
        single = LEFTFILE
    output:
        os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}", "Trinity.fasta")
    log:
        "logs/trinity/outputlog_{assembly}_trinity.log"
    params:
        extra = "",
        outdir = os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}"),
        left = LEFTFILE,
        right = RIGHTFILE
    threads: 4
    conda: '../envs/trinity-env.yaml'
    shell:
        '''
        Trinity --seqType fq --max_memory 100G --single {input.single} --output {params.outdir}
        '''
   
rule trinity_cleanup:
    input:
        trinityfile = os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}", "Trinity.fasta")
    output:
        assembled = os.path.join(ASSEMBLEDDIR, "{assembly}_trinity.fasta"),
        jellyfish = os.path.join(OUTPUTDIR, "jellyfish", "{assembly}_jellyfish_25.fasta"),
        scratchout = directory(os.path.join(SCRATCHDIR, "trinity_results_assembly_{assembly}")) 
    params:
        extra = "",
        outdir = os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}"),
        left = LEFTFILE,
        right = RIGHTFILE,
        scratch = os.path.join(SCRATCHDIR),
        jellyfile = os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}", "jellyfish.kmers.25.asm.fa")
    threads: 4
    conda: '../environment.yaml'
    shell:
        '''
        mkdir -p {params.scratch}
        cp {input.trinityfile} {output.assembled}
        #rm -r {params.outdir}
        mv {params.jellyfile} {output.jellyfish}
        mv {params.outdir} {params.scratch}
        '''

