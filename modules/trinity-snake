configfile: "config.yaml"

import io
import os
import pandas as pd
from snakemake.exceptions import print_exception, WorkflowError
import sys
sys.path.insert(1, '../scripts')
from importworkspace import *

def get_samples(assemblygroup):
    samplelist = list(ASSEMBLYFILE.loc[ASSEMBLYFILE['AssemblyGroup'] == assemblygroup]['SampleID'])
    return samplelist
    
if DROPSPIKE == 0:
    LEFTFILE = lambda filename: expand(os.path.join(OUTPUTDIR, "firsttrim", "{samples}_1.trimmed.fastq.gz"), samples = get_samples(filename.assembly))
    RIGHTFILE = lambda filename: expand(os.path.join(OUTPUTDIR, "firsttrim", "{samples}_2.trimmed.fastq.gz"), samples = get_samples(filename.assembly))
else:
    LEFTFILE = lambda filename: expand(os.path.join(OUTPUTDIR, "bbmap", "{samples}_1.clean.fastq.gz"), samples = get_samples(filename.assembly))
    RIGHTFILE = lambda filename: expand(os.path.join(OUTPUTDIR, "bbmap", "{samples}_2.clean.fastq.gz"), samples = get_samples(filename.assembly))
    
# This module needs to grab all of the list of the individual files associated with the specified
# assembly group, after the scripts/make-assembly-file.py script builds said assembly groups 
# according to user specifications.  
rule trinity:
    input:
        left = LEFTFILE,
        right = RIGHTFILE
    output:
        os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}", "Trinity.fasta")
    params:
        extra = "",
        outdir = os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}"),
        left = LEFTFILE,
        right = RIGHTFILE,
        maxmem = MAXMEMORY,
        CPUs = MAXTHREADS * MAXCORES
    log:
        err = os.path.join("logs","trinity","outputlog_{assembly}_err.log"),
        out = os.path.join("logs","trinity","outputlog_{assembly}_out.log")
    conda: '../envs/trinity-env.yaml'
    shell:
        '''
        Trinity --seqType fq --max_memory {params.maxmem}G --CPU {params.CPUs} --left {input.left} --right {input.right} --output {params.outdir} 2> {log.err} 1> {log.out}
        '''
        
rule trinity_SE:
    input:
        single = LEFTFILE
    output:
        os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}", "Trinity.fasta")
    params:
        extra = "",
        outdir = os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}"),
        left = LEFTFILE,
        right = RIGHTFILE,
        maxmem = MAXMEMORY,
        CPUs = MAXTHREADS * MAXCORES
    threads: 4
    log:
        err = os.path.join("logs","trinity","outputlog_{assembly}_err.log"),
        out = os.path.join("logs","trinity","outputlog_{assembly}_out.log")
    conda: '../envs/trinity-env.yaml'
    shell:
        '''
        Trinity --seqType fq --max_memory {params.maxmem}G --CPU {params.CPUs} --single {input.single} --output {params.outdir} 2> {log.err} 1> {log.out}
        '''
   
rule trinity_cleanup:
    input:
        trinityfile = os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}", "Trinity.fasta")
    output:
        assembled = os.path.join(ASSEMBLEDDIR, "{assembly}_trinity.fasta"),
        jellyfish = os.path.join(OUTPUTDIR, "jellyfish", "{assembly}_jellyfish_25.fasta"),
        scratchout = directory(os.path.join(SCRATCHDIR, "trinity_results_assembly_{assembly}")) 
    params:
        extra = "",
        outdir = os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}"),
        left = LEFTFILE,
        right = RIGHTFILE,
        scratch = os.path.join(SCRATCHDIR),
        jellyfile = os.path.join(OUTPUTDIR, "trinity_results_assembly_{assembly}", "jellyfish.kmers.25.asm.fa")
    conda: '../environment.yaml'
    shell:
        '''
        mkdir -p {params.scratch}
        cp {input.trinityfile} {output.assembled}
        mv {params.jellyfile} {output.jellyfish}
        if [ {params.outdir} != {params.scratch} ]
        then
            mv {params.outdir} {params.scratch}
        fi
        '''

