configfile: "config.yaml"

import io
import os
import pandas as pd
from snakemake.exceptions import print_exception, WorkflowError

OUTPUTDIR = config['outputDIR']
ASSEMBLYFILE = pd.read_csv(config["metaT_sample"], sep = "\t")
ASSEMBLYDICT = dict(zip(list(ASSEMBLYFILE.AssemblyGroup), list(ASSEMBLYFILE.SampleName)))
ASSEMBLEDDIR = os.path.join(OUTPUTDIR, config['assembledDIR'])


def get_samples(assemblygroup):
    samplelist = list(ASSEMBLYFILE.loc[ASSEMBLYFILE['AssemblyGroup'] == assemblygroup]['FastqFile']) 
    return samplelist

rule velvet:
    input:
        r1 = lambda filename: expand(os.path.join(OUTPUTDIR, "firsttrim", "{samples}_1.trimmed.fastq.gz"), samples = get_samples(filename.assembly)),
        r2 = lambda filename: expand(os.path.join(OUTPUTDIR, "firsttrim", "{samples}_2.trimmed.fastq.gz"), samples = get_samples(filename.assembly))
    output:
        #velvetdir = directory(os.path.join(OUTPUTDIR, "velvet", "{assembly}")),
        velvetfile = os.path.join(OUTPUTDIR, "velvet", "{assembly}", "contigs.fa")
    params:
        velvetdir = directory(os.path.join(OUTPUTDIR, "velvet", "{assembly}"))
    shell:
        '''
        velveth {params.velvetdir} 55 -strand_specific -shortPaired -fastq {input.r1} {input.r2}
        velvetg {params.velvetdir} -cov_cutoff auto -min_contig_lgth 100
        '''
        
rule velvet_cleanup:
    input:
        velvetfile = os.path.join(OUTPUTDIR, "velvet", "{assembly}", "contigs.fa")
    output:
        os.path.join(ASSEMBLEDDIR, "{assembly}_velvet.fasta")
    params:
        outdir = os.path.join(OUTPUTDIR, "velvet", "{assembly}")
    shell:
        '''
        cp {input.velvetfile} {output}
        #rm -r {params.outdir}
        '''