configfile: "config.yaml"

import io
import os
from os import listdir
from os.path import isfile, join
import sys
import pandas as pd
import numpy as np
import pathlib
from snakemake.exceptions import print_exception, WorkflowError  
sys.path.insert(1, 'scripts')

# Import relevant variable from config; exit if not supplied
import importworkspace
from importworkspace import *
os.system("python " + os.path.join("scripts", "importworkspace.py"))

# Contains function to check that variables are present and formatted correctly beyond provided values in config file
import checkrequirements
from checkrequirements import *

## CHECK THAT ALL REQUIREMENTS ARE SATISFIED BY EXECUTING checkrequirements() from `scripts/checkrequirements.py` ##
checkrequirementsfct()

include: "rules/02-trim.smk"
include: "rules/05-assembly/trinity-snake.smk"
include: "rules/05-assembly/megahit-snake.smk"
include: "rules/05-assembly/transabyss-snake.smk"
include: "rules/05-assembly/transabyss-merge-snake.smk"
include: "rules/05-assembly/spades-snake.smk"
include: "rules/05-assembly/rnaspades-snake.smk"
include: "rules/05-assembly/velvet-snake.smk"

ruleorder: trimmomatic > trimmomatic_SE
ruleorder: trinity > trinity_SE
ruleorder: megahit > megahit_SE
ruleorder: velvet > velvet_SE

rule all:
    input:
        # TRIMMOMATIC OUTPUTS
        trimmed = expand([os.path.join("{base}", "intermediate-files", "01-setup",\
                          "02-trim",\
                          "{sample}_1.trimmed.fastq.gz"), 
                          os.path.join("{base}", "intermediate-files", "01-setup",\
                          "02-trim",\
                          "{sample}_2.trimmed.fastq.gz")], zip, 
                         base = OUTPUTDIR, sample = filenames),
        # ASSEMBLER OUTPUTS
        assembly05 = expand(os.path.join("{base}", "{assembly}_{assembler}.fasta"),
                               base = ASSEMBLEDDIR,
                               assembly = assemblygroups, assembler = ASSEMBLERS)
