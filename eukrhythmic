configfile: "config.yaml"

#"/vortexfs1/omics/alexander/akrinos/2021-tara-phaeo/2021-akrinos-tara-phaeo/eukrhythmic_setup/config.yaml"

import io
import os
from os import listdir
from os.path import isfile, join
import sys
import pandas as pd
import numpy as np
import pathlib
from snakemake.exceptions import print_exception, WorkflowError  
sys.path.insert(1, 'scripts')

# Import relevant variable from config; exit if not supplied
import importworkspace
from importworkspace import *
os.system("python " + os.path.join("scripts", "importworkspace.py"))

# Contains function to check that variables are present and formatted correctly beyond provided values in config file
import checkrequirements
from checkrequirements import *

## CHECK THAT ALL REQUIREMENTS ARE SATISFIED BY EXECUTING checkrequirements() from `scripts/checkrequirements.py` ##
checkrequirementsfct()
include: "rules/01-quality.smk"
include: "rules/02-trim.smk"
include: "rules/03-alignment-spike.smk"
include: "rules/04-quality.smk"
include: "rules/05-assembly/trinity-snake.smk"
include: "rules/05-assembly/megahit-snake.smk"
include: "rules/05-assembly/transabyss-snake.smk"
include: "rules/05-assembly/transabyss-merge-snake.smk"
include: "rules/05-assembly/spades-snake.smk"
include: "rules/05-assembly/rnaspades-snake.smk"
include: "rules/05-assembly/velvet-snake.smk"
include: "rules/06-AGM.smk"
include: "rules/07-CAG.smk"
include: "rules/08-CAG-proteins.smk"
include: "rules/09-CAG-mapping.smk"
include: "rules/10-CAG-quality.smk"
include: "rules/11-SWAM.smk"
include: "rules/12-MAD.smk"
include: "rules/13-MAD-proteins.smk"
include: "rules/14-MAD-mapping.smk"
include: "rules/15-MAD-quality.smk"
include: "rules/16-MAD-taxonomy.smk"
include: "rules/17-MAD-function.smk"
include: "rules/18-CAG-taxonomy.smk"
include: "rules/19-CAG-emapper.smk"
include: "rules/20-MAD-filter-and-annotate.smk"

include: "rules/busco-snake.smk"
include: "rules/hardclean-snake.smk"

ruleorder: trimmomatic > trimmomatic_SE
ruleorder: ribodetector_trimmed_double > ribodetector_trimmed_single
ruleorder: trinity > trinity_SE
ruleorder: megahit > megahit_SE
ruleorder: velvet > velvet_SE

print(assemblygroups,flush=True)

rrnas = REMOVERRNA

rule all:
    input:
        subroutine_done = expand("pipeline_complete_{RRNAs}.txt", RRNAs = rrnas)
        
rule no_rrna_removal:
    input:
        # FASTQC OUTPUTS
        qual01_fastqc = expand([os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
                        "01-quality", "01a-fastqc", "{sample}_{num}_fastqc.html"),
                        os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
                        "01-quality", "01a-fastqc", "{sample}_{num}_fastqc.zip")], zip, 
                        base = OUTPUTDIR, sample = filenames, num = singleorpaired),
        # MULTIQC OUTPUTS
        qual01_multiqc = expand(os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
                                            "01-quality", "01b-multiqc",\
                                            "multiqc_report.html"), zip,
                                            base = OUTPUTDIR),
        # CHARTER RRNA REMOVAL
#        qual04_rrna = expand(os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
#                            "04a-ribo",\
#                            "{sample}_{num}.ribodetector_filt.fastq.gz"), zip,\
#                          base = OUTPUTDIR, sample = filenames, num=singleorpaired),
        # TRIMMOMATIC OUTPUTS
        trim02 = expand(os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
                          "02-trim",\
                          "{sample}_1.trimmed.fastq.gz"), zip, 
                         base = OUTPUTDIR, sample = filenames),
        # BBMAP OUTPUTS
        alignment03 = expand(os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
                          "03-alignment-spike", "{sample}_{num}.clean.fastq.gz"),\
                          zip, base = OUTPUTDIR,
                          sample = filenames, num = singleorpaired),
        # FASTQC 2 OUTPUTS (trimmed)
        qual04_fastqc = expand([os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
                                "04-quality","{sample}_{num}.trimmed_fastqc.html"),\
                                os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
                                "04-quality", "{sample}_{num}.trimmed_fastqc.zip")],
                                zip, base = OUTPUTDIR, sample = filenames, num = singleorpaired),
        # MULTIQC 2 OUTPUTS
        qual04_multiqc = expand(os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
                                  "04-quality", "multiqc",\
                                  "multiqc_report.html"), zip,\
                          base = OUTPUTDIR),
        # ASSEMBLER OUTPUTS
#        assembly05 = expand(os.path.join("{base}", "{assembly}_{assembler}.fasta"),
#                               base = ASSEMBLEDDIR,
#                               assembly = assemblygroups, assembler = ASSEMBLERS), 
        # MERGE BY ASSEMBLY GROUP
        #agm06 = expand(os.path.join(OUTPUTDIR, "intermediate-files", 
        #                            "02-assembly", "06-AGM", "{assembly}_merged.fasta"), zip,
        #                            assembly = assemblygroups),
        # CLUSTER MERGED ASSEMBLY GROUPS
        cag07 = expand(os.path.join(OUTPUTDIR, "intermediate-files",\
                                "03-merge", "07-CAG",\
                                "{assembly}_merged.fasta"), assembly = assemblygroups),
        # GET PROTEINS FROM CLUSTERED ASSEMBLY GROUP OUTPUT
        cagproteins08 = expand(os.path.join(OUTPUTDIR, "intermediate-files", "04-compare",
                                            "08-CAG-proteins",
                                            "{assembly}_CAG.fasta.transdecoder.cds"),
                                            assembly = assemblygroups),
        # GET SALMON MAPPING FROM CLUSTERED ASSEMBLY GROUP OUTPUT
        cagmapping08 = expand(os.path.join(OUTPUTDIR, "intermediate-files", "04-compare",
                                           "09-CAG-mapping", "salmon", "{assembly}_quant", "quant.sf"),
                                            assembly = assemblygroups),
        # GET QUAST RESULTS FROM CLUSTERED ASSEMBLY GROUP OUTPUT
        #cagquality08 = os.path.join(OUTPUTDIR, "intermediate-files", "04-compare",
        #                            "10-CAG-quality", "combined", "all.tsv"),
        # MERGE ACROSS ALL SAMPLES
        #swam11 = os.path.join(OUTPUTDIR, "intermediate-files", "02-assembly", "11-SWAM", "merged.fasta"),
        # CLUSTER MERGED BY SAMPLES
        mad12 = os.path.join(OUTPUTDIR, "intermediate-files",
                            "03-merge", "12-MAD", "MAD.fasta"),
        # TRANSDECODER MERGED BY SAMPLES
#        madproteins13 = os.path.join(OUTPUTDIR, "intermediate-files", "04-compare",
#                                     "13-MAD-proteins", "MAD.fasta.transdecoder.pep"),
        # MAPPING MERGED BY SAMPLES
        madmapping14 = expand(os.path.join(OUTPUTDIR, "intermediate-files", "04-compare", "14-MAD-mapping",
                                    "salmon", "{assembly}_quant", "quant.sf"), assembly = assemblygroups),
#        madmapping14_merged = expand(os.path.join(OUTPUTDIR, "intermediate-files", "04-compare", "14-MAD-mapping",
#                                    "salmon", "{assembly}_quant", "quant.sf"), assembly = "merged"),
#        eggnogmapper_mad = os.path.join(OUTPUTDIR, "intermediate-files",
#                                 "04-compare", "17-MAD-emapper",
#                                 "MAD.emapper.hits"),
        eggnogmapper_cag = expand(os.path.join(OUTPUTDIR, "intermediate-files", "04-compare",
                                  "19-CAG-emapper","{assembly}.emapper.hits"),
                                  assembly = assemblygroups),
        eukulele_cag = expand(os.path.join(OUTPUTDIR, "intermediate-files","04-compare","CAG_eukulele",
                                   "EUKulele_{assembly}_done.txt"), assembly=assemblygroups),
        mad_filter_salmon = expand(os.path.join(OUTPUTDIR, "intermediate-files", "03-merge", "20-MAD-filtered",\
                     "salmon_sample", "{sample}_quant", "quant.sf"),sample=filenames),
        mad_filter_eukulele = os.path.join(OUTPUTDIR, "intermediate-files","03-merge",
                    "20-MAD-filtered","EUKulele","taxonomy_estimation",
                    "MAD.fasta.transdecoder-estimated-taxonomy.out"),
        mad_filter_eggnog = os.path.join(OUTPUTDIR, "intermediate-files",
                                 "03-merge", "20-MAD-filtered", "emapper",
                                 "MAD.emapper.hits")
        
        # QUALITY MERGED BY SAMPLES
        #madquality15 = os.path.join(OUTPUTDIR, "intermediate-files", "04-compare",\
        #                       "15-MAD-quality", "quast", "report.tsv")
        # QUANTIFICATION BASED ON SPIKE FILE
        #copies = expand(os.path.join(OUTPUTDIR, "salmon_{folder}", "copiesperL.tab"), 
        #                folder = "by_assembly_group",
        #                base = OUTPUTDIR)
    output:
        "pipeline_complete_0.txt"
    shell:
        """
        touch {output}
        """
        
rule rrna_removal:
    input:
        # FASTQC OUTPUTS
        qual01_fastqc = expand([os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
                        "01-quality", "01a-fastqc", "{sample}_{num}_fastqc.html"),
                        os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
                        "01-quality", "01a-fastqc", "{sample}_{num}_fastqc.zip")], zip, 
                        base = OUTPUTDIR, sample = filenames, num = singleorpaired),
        # MULTIQC OUTPUTS
        qual01_multiqc = expand(os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
                                            "01-quality", "01b-multiqc",\
                                            "multiqc_report.html"), zip,
                                            base = OUTPUTDIR),
        # TRIMMOMATIC OUTPUTS
        trim02 = expand(os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
                          "02-trim",\
                          "{sample}_1.trimmed.fastq.gz"), zip, 
                         base = OUTPUTDIR, sample = filenames),
        # BBMAP OUTPUTS
        alignment03 = expand(os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
                          "03-alignment-spike", "{sample}_{num}.clean.fastq.gz"),\
                          zip, base = OUTPUTDIR,
                          sample = filenames, num = singleorpaired),
        # FASTQC 2 OUTPUTS (trimmed)
        qual04_fastqc = expand([os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
                                "04-quality","{sample}_{num}.trimmed_fastqc.html"),\
                                os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
                                "04-quality", "{sample}_{num}.trimmed_fastqc.zip")],
                                zip, base = OUTPUTDIR, sample = filenames, num = singleorpaired),
        # MULTIQC 2 OUTPUTS
        qual04_multiqc = expand(os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
                                  "04-quality", "multiqc",\
                                  "multiqc_report.html"), zip,\
                          base = OUTPUTDIR),
        # RRNA REMOVAL
        qual04_rrna = expand(os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
                            "04a-ribo",\
                            "{sample}_{num}.ribodetector_filt.fastq.gz"), zip,\
                          base = OUTPUTDIR, sample = filenames, num=singleorpaired),
        # ASSEMBLER OUTPUTS
#        assembly05 = expand(os.path.join("{base}", "{assembly}_{assembler}.fasta"),
#                               base = ASSEMBLEDDIR,
#                               assembly = assemblygroups, assembler = ASSEMBLERS), 
        # MERGE BY ASSEMBLY GROUP
        #agm06 = expand(os.path.join(OUTPUTDIR, "intermediate-files", 
        #                            "02-assembly", "06-AGM", "{assembly}_merged.fasta"), zip,
        #                            assembly = assemblygroups),
        # CLUSTER MERGED ASSEMBLY GROUPS
        cag07 = expand(os.path.join(OUTPUTDIR, "intermediate-files",\
                                "03-merge", "07-CAG",\
                                "{assembly}_merged.fasta"), assembly = assemblygroups),
        # GET PROTEINS FROM CLUSTERED ASSEMBLY GROUP OUTPUT
        cagproteins08 = expand(os.path.join(OUTPUTDIR, "intermediate-files", "04-compare",
                                            "08-CAG-proteins",
                                            "{assembly}_CAG.fasta.transdecoder.cds"),
                                            assembly = assemblygroups),
        # GET SALMON MAPPING FROM CLUSTERED ASSEMBLY GROUP OUTPUT
        cagmapping08 = expand(os.path.join(OUTPUTDIR, "intermediate-files", "04-compare",
                                           "09-CAG-mapping", "salmon", "{assembly}_quant", "quant.sf"),
                                            assembly = assemblygroups),
        # GET QUAST RESULTS FROM CLUSTERED ASSEMBLY GROUP OUTPUT
        cagquality08 = os.path.join(OUTPUTDIR, "intermediate-files", "04-compare",
                                    "10-CAG-quality", "combined", "all.tsv"),
        # MERGE ACROSS ALL SAMPLES
        swam11 = os.path.join(OUTPUTDIR, "intermediate-files", "02-assembly", "11-SWAM", "merged.fasta"),
        # CLUSTER MERGED BY SAMPLES
        mad12 = os.path.join(OUTPUTDIR, "intermediate-files",
                            "03-merge", "12-MAD", "MAD.fasta"),
        # TRANSDECODER MERGED BY SAMPLES
        madproteins13 = os.path.join(OUTPUTDIR, "intermediate-files", "04-compare",
                                     "13-MAD-proteins", "MAD.fasta.transdecoder.pep"),
        # MAPPING MERGED BY SAMPLES
        madmapping14 = expand(os.path.join(OUTPUTDIR, "intermediate-files", "04-compare", "14-MAD-mapping",
                                    "salmon", "{assembly}_quant", "quant.sf"), assembly = assemblygroups),
        madmapping14_merged = expand(os.path.join(OUTPUTDIR, "intermediate-files", "04-compare", "14-MAD-mapping",
                                    "salmon", "{assembly}_quant", "quant.sf"), assembly = "merged"),
        eggnogmapper_cag = expand(os.path.join(OUTPUTDIR, "intermediate-files", "04-compare",
                                  "19-CAG-emapper","{assembly}.emapper.hits"),
                                  assembly = assemblygroups),
        eggnogmapper_mad = os.path.join(OUTPUTDIR, "intermediate-files",
                                 "04-compare", "17-MAD-emapper",
                                 "MAD.emapper.hits"),
        eukulele_cag = expand(os.path.join(OUTPUTDIR, "intermediate-files","04-compare","CAG_eukulele",
                                   "EUKulele_{assembly}_done.txt"), assembly=assemblygroups) 
        # QUALITY MERGED BY SAMPLES
        #madquality15 = os.path.join(OUTPUTDIR, "intermediate-files", "04-compare",\
        #                       "15-MAD-quality", "quast", "report.tsv")
        # QUANTIFICATION BASED ON SPIKE FILE
        #copies = expand(os.path.join(OUTPUTDIR, "salmon_{folder}", "copiesperL.tab"), 
        #                folder = "by_assembly_group",
        #                base = OUTPUTDIR)
    output:
        "pipeline_complete_1.txt"
    shell:
        """
        touch {output}
        """
