configfile: "config.yaml"

#"/vortexfs1/omics/alexander/akrinos/2021-tara-phaeo/2021-akrinos-tara-phaeo/eukrhythmic_setup/config.yaml"

import io
import os
from os import listdir
from os.path import isfile, join
import sys
import pandas as pd
import numpy as np
import pathlib
from snakemake.exceptions import print_exception, WorkflowError  
sys.path.insert(1, 'scripts')

# Import relevant variable from config; exit if not supplied
import importworkspace
from importworkspace import *
os.system("python " + os.path.join("scripts", "importworkspace.py"))

# Contains function to check that variables are present and formatted correctly beyond provided values in config file
import checkrequirements
from checkrequirements import *

## CHECK THAT ALL REQUIREMENTS ARE SATISFIED BY EXECUTING checkrequirements() from `scripts/checkrequirements.py` ##
checkrequirementsfct()
#print(ASSEMBLEDDIR)
include: "rules/01-quality.smk"
include: "rules/02-trim.smk"
include: "rules/03-alignment-spike.smk"
include: "rules/04-quality.smk"
include: "rules/05-assembly/trinity-snake.smk"
include: "rules/05-assembly/megahit-snake.smk"
include: "rules/05-assembly/transabyss-snake.smk"
include: "rules/05-assembly/transabyss-merge-snake.smk"
include: "rules/05-assembly/spades-snake.smk"
include: "rules/05-assembly/rnaspades-snake.smk"
include: "rules/05-assembly/velvet-snake.smk"
include: "rules/06-AGM.smk"
include: "rules/07-CAG.smk"
include: "rules/08-CAG-proteins.smk"
include: "rules/09-CAG-mapping.smk"
include: "rules/10-CAG-quality.smk"
include: "rules/11-SWAM.smk"
include: "rules/12-MAD.smk"
include: "rules/13-MAD-proteins.smk"
include: "rules/14-MAD-mapping.smk"
include: "rules/15-MAD-quality.smk"
include: "rules/16-MAD-taxonomy.smk"
include: "rules/17-MAD-function.smk"
include: "rules/18-CAG-taxonomy.smk"
include: "rules/19-CAG-emapper.smk"

include: "rules/busco-snake.smk"
<<<<<<< HEAD
=======
include: "rules/salmon-snake.smk"
include: "rules/spades-snake.smk"
include: "rules/rnaspades-snake.smk"
include: "rules/annotate-snake.smk"
>>>>>>> 4d76a4e3c55e758ed0dca54a1bda6f13988c7ba6
include: "rules/hardclean-snake.smk"

ruleorder: trimmomatic > trimmomatic_SE
ruleorder: trinity > trinity_SE
ruleorder: megahit > megahit_SE
ruleorder: velvet > velvet_SE
ruleorder: transdecoder_indiv > transdecoder_final_proteins > transdecoder_by_assembly
ruleorder: salmon_indiv > salmon_clustering
ruleorder: salmon_clustering > salmon_clustering_raw
ruleorder: combinequastmerge > quast_merged_transdecoded
ruleorder: clustering_mega_merge_mmseqs > clustering_by_assembly_group_mmseqs
ruleorder: salmon_clustering_raw > salmon_clustering
ruleorder: run_busco > busco

print(assemblygroups,flush=True)
rule all:
    input:
        # FASTQC OUTPUTS
#        qual01_fastqc = expand([os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
#                        "01-quality", "01a-fastqc", "{sample}_{num}_fastqc.html"),
#                        os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
#                        "01-quality", "01a-fastqc", "{sample}_{num}_fastqc.zip")], zip, 
#                        base = OUTPUTDIR, sample = filenames, num = singleorpaired),
        # MULTIQC OUTPUTS
#        qual01_multiqc = expand(os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
#                                            "01-quality", "01b-multiqc",\
#                                            "multiqc_report.html"), zip,
#                                            base = OUTPUTDIR),
        # TRIMMOMATIC OUTPUTS
#        trim02 = expand(os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
#                          "02-trim",\
#                          "{sample}_1.trimmed.fastq.gz"), zip, 
#                         base = OUTPUTDIR, sample = filenames),
        # BBMAP OUTPUTS
#        alignment03 = expand(os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
#                          "03-alignment-spike", "{sample}_{num}.clean.fastq.gz"),\
#                          zip, base = OUTPUTDIR,
#                          sample = filenames, num = singleorpaired),
        # FASTQC 2 OUTPUTS (trimmed)
#        qual04_fastqc = expand([os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
#                                "04-quality","{sample}_{num}.trimmed_fastqc.html"),\
#                                os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
#                                "04-quality", "{sample}_{num}.trimmed_fastqc.zip")],
#                                zip, base = OUTPUTDIR, sample = filenames, num = singleorpaired),
        # MULTIQC 2 OUTPUTS
#        qual04_multiqc = expand(os.path.join(OUTPUTDIR, "intermediate-files", "01-setup",\
#                                  "04-quality", "multiqc",\
#                                  "multiqc_report.html"), zip,\
#                          base = OUTPUTDIR),
        # ASSEMBLER OUTPUTS
<<<<<<< HEAD
#        assembly05 = expand(os.path.join("{base}", "{assembly}_{assembler}.fasta"),
#                               base = ASSEMBLEDDIR,
#                               assembly = assemblygroups, assembler = ASSEMBLERS), 
        # MERGE BY ASSEMBLY GROUP
        agm06 = expand(os.path.join(OUTPUTDIR, "intermediate-files", 
                                    "02-assembly", "06-AGM", "{assembly}_merged.fasta"), zip,
                                    assembly = assemblygroups),
        # CLUSTER MERGED ASSEMBLY GROUPS
        cag07 = expand(os.path.join(OUTPUTDIR, "intermediate-files",\
                                "03-merge", "07-CAG",\
                                "{assembly}_merged.fasta"), assembly = assemblygroups),
        # GET PROTEINS FROM CLUSTERED ASSEMBLY GROUP OUTPUT
        cagproteins08 = expand(os.path.join(OUTPUTDIR, "intermediate-files", "04-compare",
                                            "08-CAG-proteins",
                                            "{assembly}_CAG.fasta.transdecoder.cds"),
                                            assembly = assemblygroups),
        # GET SALMON MAPPING FROM CLUSTERED ASSEMBLY GROUP OUTPUT
        cagmapping08 = expand(os.path.join(OUTPUTDIR, "intermediate-files", "04-compare",
                                           "09-CAG-mapping", "salmon", "{assembly}_quant", "quant.sf"),
                                            assembly = assemblygroups),
        # GET QUAST RESULTS FROM CLUSTERED ASSEMBLY GROUP OUTPUT
#        cagquality08 = os.path.join(OUTPUTDIR, "intermediate-files", "04-compare",
#                                    "10-CAG-quality", "combined", "all.tsv"),
        # MERGE ACROSS ALL SAMPLES
        swam11 = os.path.join(OUTPUTDIR, "intermediate-files", "02-assembly", "11-SWAM", "merged.fasta"),
        # CLUSTER MERGED BY SAMPLES
        mad12 = os.path.join(OUTPUTDIR, "intermediate-files",
                            "03-merge", "12-MAD", "MAD.fasta"),
        # TRANSDECODER MERGED BY SAMPLES
        madproteins13 = os.path.join(OUTPUTDIR, "intermediate-files", "04-compare",
                                     "13-MAD-proteins", "MAD.fasta.transdecoder.pep"),
        # MAPPING MERGED BY SAMPLES
        madmapping14 = expand(os.path.join(OUTPUTDIR, "intermediate-files", "04-compare", "14-MAD-mapping",
                                    "salmon", "{assembly}_quant", "quant.sf"), assembly = assemblygroups),
        madmapping14_merged = expand(os.path.join(OUTPUTDIR, "intermediate-files", "04-compare", "14-MAD-mapping",
                                    "salmon", "{assembly}_quant", "quant.sf"), assembly = "merged"),
        eggnogmapper_cag = expand(os.path.join(OUTPUTDIR, "intermediate-files", "04-compare",
                                  "19-CAG-emapper","{assembly}.emapper.hits"),
                                  assembly = assemblygroups),
        eukulele = expand(os.path.join(OUTPUTDIR, "intermediate-files","04-compare","CAG_eukulele", "EUKulele_{assembly}_done.txt"), assembly=assemblygroups) #os.path.join(OUTPUTDIR, "CAG_eukulele_pleuro", "EUKulele_done.txt")
        # QUALITY MERGED BY SAMPLES
        #madquality15 = os.path.join(OUTPUTDIR, "intermediate-files", "04-compare",\
        #                       "15-MAD-quality", "quast", "report.tsv")
        
=======
        assemblersout = expand(os.path.join("{base}", "{assembly}_{assembler}.fasta"), 
                               base = ASSEMBLEDDIR, assembly = assemblygroups, assembler = ASSEMBLERS), 
        # QUAST OUTPUTS
        quast = expand(os.path.join("{base}", "quast", "{assembly}"), base = OUTPUTDIR, assembly = assemblygroups),
        # COMBINE QUAST OUTPUTS
        quastcombine = expand(os.path.join("{base}", "quast", "fullresults", "allresults.tsv"), base = OUTPUTDIR),
        # TRANSDECODER OUTPUTS - optionally, run TransDecoder on the individual assemblies
#        transdecoder_indiv = expand(os.path.join("{base}", "transdecoder_indiv", 
#                                                 "{assembly}_{assembler}.fasta.transdecoder.{tdextensions}"),  
#                                    base = OUTPUTDIR, assembly = assemblygroups, assembler = ASSEMBLERS,
#                                    tdextensions = TDEXTENSIONS),
        # INDIVIDUAL CLUSTERING OUTPUTS
#        clustering_each_assembler = expand(os.path.join("{base}", "cluster1", "{assembly}_{assembler}.fasta"), 
#                                           base = OUTPUTDIR, assembly = assemblygroups, assembler = ASSEMBLERS),
        # MERGED CLUSTERING OUTPUTS - cluster on merged samples by assembly group and mega
        clustering_by_assembly_group = expand(os.path.join("{base}", "cluster_{folder}", "{assembly}_merged.fasta"), 
                                              base = OUTPUTDIR, folder = "by_assembly_group", assembly = assemblygroups),
        clustering_mega_merge = expand(os.path.join("{base}", "cluster_{folder}", "{assembly}_merged.fasta"), 
                                   base = OUTPUTDIR, folder = "mega_merge", assembly = "merged"),
        # SALMON QUANTIFICATION OF RAW AGAINST INDIVIDUAL ASSEMBLIES/ASSEMBLERS
        salmon_indiv = expand(os.path.join("{base}", "indiv_salmon", "salmon_quant_assembly_{assembly}_{assembler}",
                              "quant.sf"), base = OUTPUTDIR, assembly = assemblygroups, assembler = ASSEMBLERS),
        salmon_merged = expand(os.path.join("{base}", "merged_salmon", "salmon_quant_assembly_{assembly}", "quant.sf"), 
                               base = OUTPUTDIR, assembly = assemblygroups),
        # SALMON QUANTIFICATION OF RAW AGAINST MERGED BY ASSEMBLY GROUP
        salmon_by_assembly = expand(os.path.join("{base}", "salmon_{folder}", "salmon_quant_assembly_{assembly}",
                                    "quant.sf"), base = OUTPUTDIR, folder = "by_assembly_group", assembly = assemblygroups),
        # SALMON QUANTIFICATION OF ALL RAW FILES AGAINST MEGA-MERGED ASSEMBLY
        salmon_mega_merge = expand(os.path.join("{base}", "salmon_{folder}", "salmon_quant_assembly_{assembly}", "quant.sf"), 
                                   base = OUTPUTDIR, folder = "mega_merge", assembly = "merged"),
        # SALMON QUANTIFICATION OF INDIVIDUAL RAW FILES FROM EACH AG AGAINST MEGA-MERGED ASSEMBLY
        salmon_mega_merge_raw = expand(os.path.join("{base}", "salmon_{folder}", "raw_individual", 
                                   "salmon_quant_assembly_{assembly}", "quant.sf"), 
                                   base = OUTPUTDIR, folder = "mega_merge", assembly = assemblygroups),
                                   
        # TRANSDECODER ON FINAL AND MEGA-MERGED ASSEMBLY
        transdecoder_mega_merge = expand(os.path.join("{base}", "transdecoder_{folder}_finalproteins", 
                                                      "{assembly}.fasta.transdecoder.{tdextensions}"), 
                                       base = OUTPUTDIR, folder = "mega_merge", assembly = "merged",
                                       tdextensions = TDEXTENSIONS),
        trandecoder_by_assembly_group = expand(os.path.join("{base}", "transdecoder_{folder}_finalproteins", 
                                                    "{assembly}.fasta.transdecoder.{tdextensions}"), 
                                       base = OUTPUTDIR, folder = "by_assembly_group",
                                       assembly = assemblygroups, tdextensions = TDEXTENSIONS),
        # QUAST QUALITY ASSESSMENT OF FINAL ASSEMBLY
        quastfinal = expand(os.path.join("{base}", "quast_{folder}", "{assembly}"), base = OUTPUTDIR, 
                            folder = "mega_merge", assembly = "merged"),
        quast_merged_mega_merge = expand(os.path.join("{base}", "quast_{folder}", "{assembly}"), base = OUTPUTDIR, 
                                         folder = "by_assembly_group", assembly = assemblygroups),
        # COMBINE QUAST MERGED OUTPUTS FOR BY ASSEMBLY GROUP
        quastmergedcombine = expand(os.path.join("{base}", "quast_{folder}", "fullresults", "allresults.tsv"), 
                                    base = OUTPUTDIR, folder = "by_assembly_group"),
>>>>>>> 4d76a4e3c55e758ed0dca54a1bda6f13988c7ba6
        # BUSCO ASSESSMENT OF FINAL ASSEMBLY
        #busco = expand(os.path.join("{base}", "busco", "{database}", "{folder}", "{assembly}"), base = OUTPUTDIR, 
        #               database = "eukaryota", folder = "mega_merge", assembly = "merged"), # eukaryota, bacteria
        # HMMER ALIGNMENT OF FINAL ASSEMBLY BEFORE MEGA-MERGE
        #hmmer = expand(os.path.join("{base}", "pfam", "{folder}", "{assembly}.tblout"), base = OUTPUTDIR, 
        #               folder = "by_assembly_group", assembly = assemblygroups),
        # DIAMOND ALIGNMENT AND KEGG ANNOTATION 
        #kegg = expand(os.path.join("{base}", "kegg", "{folder}", "{assembly}_kegg.csv"), base = OUTPUTDIR, 
        #              folder = "by_assembly_group", assembly = assemblygroups),
        # QUANTIFICATION BASED ON SPIKE FILE
        #copies = expand(os.path.join(OUTPUTDIR, "salmon_{folder}", "copiesperL.tab"), 
        #                folder = "by_assembly_group",
        #                base = OUTPUTDIR),
        # EUKULELE
        #eukulele = expand(os.path.join(OUTPUTDIR, "eukulele_{folder}"), 
        #                folder = "by_assembly_group",
        #                base = OUTPUTDIR)
